Belady现象：在采用FIFO时候，有时候会出现分配的物理页面数增加，缺页率反而提高的异常现象

Belady原因：FIFO算法的置换特征与进程访问内存的动态特征是矛盾的，与置换算法的目标是不一致的，因此
被它置换出去的页面并一定是进程不会访问的


LRU不会出现belady现象

LRU，FIFO，CLock算法对比:
    本质上都是先进先出的思路，只不过LRU是针对页面的最近访问时间来进行排序，所以需要每一次页面访问的时候动态地调整各个页面的先后顺序
    FIFO是针对页面进入内存的时间来进行排序，这个时间是固定不变的，所以各个页面之间的先后顺序是固定的。
    如果一个页面进入内存后没有被访问，那么他的最近访问时间就是他进入内存的时间。
    换句话说，如果内存中所有页面都未曾访问过，那么LRU算法将会退化为FIFO算法
    
LRU算法性能最好，但是系统开销大
FIFO算法开销较小，但是可以会发生belady现象
clock算法折中，不必动态地调整该页面在链表中的顺序，而仅仅是做一个标记，然后点等到发生缺页中断的时候，在把它移到链表末尾